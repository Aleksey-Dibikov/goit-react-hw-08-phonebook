{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-selector.js","components/ContactList/ContactList.js","components/ContactsForm/ContactsForm.js","components/Filter/Filter.js","App.js","index.js","components/ContactsForm/ContactsForm.module.css"],"names":["module","exports","changeFilter","createAction","axios","defaults","baseURL","fetchContacts","createAsyncThunk","_","a","rejectWithValue","get","data","addContact","contact","post","deleteContact","contactId","delete","id","items","createReducer","name","number","fulfilled","payload","state","filter","loading","pending","rejected","error","combineReducers","contactPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","getLoading","getFilter","getVisibleContacts","createSelector","allContacts","normalizedFilter","toLowerCase","includes","ContactList","useSelector","dispatch","useDispatch","className","s","TaskList","map","TaskList_item","TaskList_button","onClick","ContactsForm","useState","setName","setNumber","nameId","uuidv4","numberId","handleInputChange","e","target","value","onSubmit","preventDefault","searchName","alert","TaskEditor","TaskEditor_label","TaskEditor_input","type","pattern","title","required","onChange","TaskEditor_button","Filter","App","isLoading","onFetchContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a1385d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"ContactList_TaskList__1vssD\",\"TaskList_item\":\"ContactList_TaskList_item__2eNkl\",\"TaskList_button\":\"ContactList_TaskList_button__1TfR2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor_input\":\"Filter_TaskEditor_input__1ids8\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\n// const fetchContactsRequest = createAction('contact/ContactsRequest');\r\n// const fetchContactsSuccess = createAction('contact/ContactsSuccess');\r\n// const fetchContactsError = createAction('contact/ContactsError');\r\n\r\n// const addContactRequest = createAction('contact/addContactRequest');\r\n// const addContactSuccess = createAction('contact/addContactSuccess');\r\n// const addContactError = createAction('contact/addContactError');\r\n\r\n// const deleteContactRequest = createAction('contact/deleteContactRequest');\r\n// const deleteContactSuccess = createAction('contact/deleteContactSuccess');\r\n// const deleteContactError = createAction('contact/deleteContactError');\r\n\r\nconst changeFilter = createAction('contact/filter');\r\n\r\nexport {\r\n    // fetchContactsRequest,\r\n    // fetchContactsSuccess,\r\n    // fetchContactsError,\r\n    // addContactRequest,\r\n    // addContactSuccess,\r\n    // addContactError,\r\n    // deleteContactRequest,\r\n    // deleteContactSuccess,\r\n    // deleteContactError,\r\n    changeFilter,\r\n};","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n// import {\r\n    // fetchContactsRequest,\r\n    // fetchContactsSuccess,\r\n    // fetchContactsError,\r\n    // addContactError,\r\n    // addContactRequest,\r\n    // addContactSuccess,\r\n    // deleteContactError,\r\n    // deleteContactRequest,\r\n    // deleteContactSuccess,\r\n// } from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'https://6196b1abaf46280017e7e242.mockapi.io/';\r\n\r\n// const fetchContacts = () => dispatch => {\r\n//     dispatch(fetchContactsRequest())\r\n//     axios\r\n//         .get('/contacts')\r\n//         .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n//         .catch(error => dispatch(fetchContactsError(error)))\r\n// }\r\nconst fetchContacts = createAsyncThunk(\r\n    'contact/fetchContacts',\r\n    async (_, { rejectWithValue }) => {\r\n        try {\r\n            const { data } = await axios.get('/contact');\r\n            return data;\r\n        } catch (error) {\r\n            return rejectWithValue(error)\r\n        }\r\n    }\r\n);\r\n\r\n// const addContact = ({ name, number }) => dispatch => {\r\n//     dispatch(addContactRequest());\r\n//     axios\r\n//         .post('/contacts', ({ name, number }))\r\n//         .then(({ data }) => dispatch(addContactSuccess(data)))\r\n//         .catch(error => dispatch(addContactError(error)));\r\n// };\r\nconst addContact = createAsyncThunk(\r\n    'contact/addContact',\r\n    async (contact, {rejectWithValue}) => {\r\n        try {\r\n            const { data } = await axios.post('/contacts', contact);\r\n            return data;\r\n        } catch (error) {\r\n            return rejectWithValue(error)\r\n        }\r\n    }\r\n);\r\n\r\n\r\n// const deleteContact = id => dispatch => {\r\n//     dispatch(deleteContactRequest());\r\n//     axios\r\n//         .delete(`/contacts/${id}`)\r\n//         .then(() => dispatch(deleteContactSuccess(id)))\r\n//         .catch(error => dispatch(deleteContactError(error)))\r\n// };\r\nconst deleteContact = createAsyncThunk(\r\n    'contact/deleteContact',\r\n    async ( contactId, {rejectWithValue} ) => {\r\n        try {\r\n            const {data: {id}} = await axios.delete(`/contacts/${contactId}`);\r\n            return id;\r\n        } catch (error) {\r\n            return rejectWithValue(error)\r\n        }\r\n    }\r\n);\r\n\r\nexport { addContact, deleteContact, fetchContacts };","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from \"redux\";\r\nimport {\r\n  // fetchContactsRequest,\r\n  // fetchContactsSuccess,\r\n  // fetchContactsError,\r\n  // addContactRequest,\r\n  // addContactSuccess,\r\n  // addContactError,\r\n  // deleteContactRequest,\r\n  // deleteContactSuccess,\r\n  // deleteContactError,\r\n  changeFilter,\r\n} from './contacts-actions';\r\nimport {\r\n  addContact,\r\n  deleteContact,\r\n  fetchContacts,\r\n} from './contacts-operations';\r\n\r\n\r\nconst contacts = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nconst items = createReducer(contacts, {\r\n  [fetchContacts.fulfilled]: (_, {payload})=> payload,\r\n  [addContact.fulfilled]: (state, { payload }) => [...state, payload],\r\n  [deleteContact.fulfilled]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n// const loading = createReducer(false, {\r\n//   [fetchContactsRequest]: () => true,\r\n//   [fetchContactsSuccess]: () => false,\r\n//   [fetchContactsError]: () => false,\r\n\r\n  // [addContactRequest]: () => true,\r\n  // [addContactSuccess]: () => false,\r\n  // [addContactError]: () => false,\r\n  \r\n  // [deleteContactRequest]: () => true,\r\n  // [deleteContactSuccess]: () => false,\r\n  // [deleteContactError]: () => false,\r\n// });\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContacts.pending]: () => true,\r\n  [fetchContacts.fulfilled]: () => false,\r\n  [fetchContacts.rejected]: () => false,\r\n  \r\n  [addContact.pending]: () => true,\r\n  [addContact.fulfilled]: () => false,\r\n  [addContact.rejected]: () => false,\r\n  \r\n  [deleteContact.pending]: () => true,\r\n  [deleteContact.fulfilled]: () => false,\r\n  [deleteContact.rejected]: () => false,\r\n})\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n})","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\n// import logger from \"redux-logger\";\r\nimport {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\n\r\n\r\n// const middleware = [...getDefaultMiddleware(\r\n//     {\r\n//         serializableCheck: {\r\n//             ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//         },\r\n//     }),\r\n//     logger\r\n// ];\r\n\r\nconst contactPersistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: persistReducer(contactPersistConfig, contactsReducer)\r\n    },\r\n    middleware: [...getDefaultMiddleware(\r\n        {\r\n            serializableCheck: {\r\n                ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n            },\r\n        }),\r\n        // logger\r\n    ],\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { persistor, store };","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\nconst getAllContacts = state => state.contacts.items;\r\nconst getFilter = state => state.contacts.filter;\r\n\r\n// const getVisibleContacts = state => {\r\n//     const allContacts = getAllContacts(state);\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return allContacts.filter(({name}) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n\r\nconst getVisibleContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (allContacts, filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n\r\n        return allContacts.filter(({ name }) =>\r\n            name.toLowerCase().includes(normalizedFilter),\r\n        );\r\n    }\r\n);\r\n\r\nexport { getLoading, getFilter, getVisibleContacts };","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  // connect,\r\n  useSelector,\r\n  useDispatch\r\n} from 'react-redux';\r\nimport { deleteContact } from '../../redux/contacts/contacts-operations';\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selector';\r\nimport s from './ContactList.module.css';\r\nexport default function ContactList() {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <ul className={s.TaskList}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={s.TaskList_item}>\r\n          {name} : {number}\r\n          <button\r\n            className={s.TaskList_button}\r\n            onClick={() => dispatch(deleteContact.fulfilled(id))}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  onDeleteContact: PropTypes.func,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ),\r\n};\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   contacts: getVisibleContacts(state),\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDeleteContact: id => dispatch(deleteContact.fulfilled(id)),\r\n// })\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nimport {\r\n  // connect,\r\n  useSelector,\r\n  useDispatch,\r\n} from 'react-redux';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { addContact } from '../../redux/contacts/contacts-operations';\r\nimport s from './ContactsForm.module.css';\r\n\r\nexport default function ContactsForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');  \r\n  const { contacts } = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n\r\n  const nameId = uuidv4();\r\n  const numberId = uuidv4();\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const searchName = name =>\r\n      contacts.items.map(contact => contact.name).includes(name);\r\n    \r\n    if (searchName(name)) {\r\n      return alert(`${name} is already in contacts`);\r\n    } else {\r\n      // onAddContact({ name, number });\r\n      dispatch(addContact({ name, number }));\r\n    }\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={s.TaskEditor}>\r\n      <label id={nameId} className={s.TaskEditor_label}>\r\n        <input\r\n          className={s.TaskEditor_input}\r\n          id={nameId}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв,\r\n            апострофа, тире и пробелов.\r\n            Например Adrian, Jacob Mercer,\r\n            Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={handleInputChange}\r\n        />\r\n      </label>\r\n      <label id={numberId} className={s.TaskEditor_label}>\r\n        <input\r\n          className={s.TaskEditor_input}\r\n          id={numberId}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={handleInputChange}\r\n        />\r\n      </label>\r\n      <button className={s.TaskEditor_button} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactsForm.propTypes = {\r\n  onAddContact: PropTypes.func,\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     onAddContact: ({name, number}) => dispatch(addContact({name, number})),\r\n//   }\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactsForm);\r\n","import PropTypes from 'prop-types';\r\nimport {\r\n  // connect,\r\n  useSelector,\r\n  useDispatch,\r\n} from 'react-redux';\r\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\r\nimport { getFilter } from '../../redux/contacts/contacts-selector';\r\nimport s from './Filter.module.css';\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  // const onChangeFilter = (event) => dispatch(changeFilter(event.target.value));\r\n\r\n  return (\r\n    <div>\r\n      <h3>Find contacts by name</h3>\r\n      <input\r\n        className={s.TaskEditor_input}\r\n        type=\"text\"\r\n        value={value}\r\n        // onChange={onChangeFilter}\r\n        onChange={(e) => dispatch(changeFilter(e.target.value))}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onchangeFilter: PropTypes.func,\r\n};\r\n\r\n// const mapStateToProps = state => ({\r\n//   value: getFilter(state),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChangeFilter: (event) => dispatch(changeFilter(event.target.value)),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter)","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  // connect,\r\n  useSelector,\r\n  useDispatch,\r\n} from 'react-redux';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport ContactsForm from './components/ContactsForm/ContactsForm';\r\nimport Filter from './components/Filter/Filter';\r\nimport { fetchContacts } from './redux/contacts/contacts-operations';\r\nimport { getLoading } from './redux/contacts/contacts-selector';\r\n\r\nfunction App () {\r\n  const isLoading = useSelector(getLoading);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Phonebook</h1>\r\n      <ContactsForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList\r\n        onFetchContacts={() => dispatch(fetchContacts.fulfilled())}\r\n      />\r\n      {isLoading && <h1>loading ...</h1>}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n// ====== Class ====== =======\r\n\r\n\r\n// class App extends Component {\r\n//   componentDidMount() {\r\n//     this.props.onFetchContacts();\r\n//   }\r\n\r\n//   render (){\r\n\r\n//     return (\r\n//       <div className=\"App\">\r\n//         <h1>Phonebook</h1>\r\n//         <ContactsForm />\r\n//         <h2>Contacts</h2>\r\n//         <Filter />\r\n//         <ContactList />\r\n//       </div>\r\n//       );\r\n//   };\r\n// };\r\n\r\n// const mapStateToProps = state => ({\r\n//   isLoading: getLoading(state),\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onFetchContacts: () => dispatch(fetchContacts.fulfilled()),\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport {persistor, store} from './redux/store';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={'please wait'} persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"ContactsForm_TaskEditor__2VeED\",\"TaskEditor_label\":\"ContactsForm_TaskEditor_label__17ZZj\",\"TaskEditor_input\":\"ContactsForm_TaskEditor_input__vn7L0\",\"TaskEditorinput\":\"ContactsForm_TaskEditorinput__1K7lu\",\"TaskEditor_button\":\"ContactsForm_TaskEditor_button__Gs4c6\"};"],"sourceRoot":""}